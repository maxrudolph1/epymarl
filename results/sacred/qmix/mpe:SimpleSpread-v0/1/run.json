{
  "artifacts": [],
  "command": "my_main",
  "experiment": {
    "base_dir": "/home/mrudolph/documents/hetcommarl/epymarl/src",
    "dependencies": [
      "munch==2.5.0",
      "numpy==1.21.6",
      "PyYAML==5.3.1",
      "sacred==0.8.2",
      "torch==1.13.1"
    ],
    "mainfile": "main.py",
    "name": "pymarl",
    "repositories": [
      {
        "commit": "f355a55262ac9afecdb53368fec6337c549cc160",
        "dirty": true,
        "url": "git@github.com:maxrudolph1/epymarl.git"
      },
      {
        "commit": "f355a55262ac9afecdb53368fec6337c549cc160",
        "dirty": true,
        "url": "git@github.com:maxrudolph1/epymarl.git"
      },
      {
        "commit": "f355a55262ac9afecdb53368fec6337c549cc160",
        "dirty": true,
        "url": "git@github.com:maxrudolph1/epymarl.git"
      }
    ],
    "sources": [
      [
        "main.py",
        "_sources/main_10bb275063c412d8d7ce9641d9c0d4b0.py"
      ],
      [
        "run.py",
        "_sources/run_79ab728956cdd749855c86ef08770541.py"
      ],
      [
        "utils/logging.py",
        "_sources/logging_7799699b534f806632c1d618a6ef7e02.py"
      ]
    ]
  },
  "fail_trace": [
    "Traceback (most recent call last):\n",
    "  File \"/home/mrudolph/miniconda3/envs/commgpi/lib/python3.7/site-packages/gym/envs/registration.py\", line 139, in spec\n    importlib.import_module(mod_name)\n",
    "  File \"/home/mrudolph/miniconda3/envs/commgpi/lib/python3.7/importlib/__init__.py\", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n",
    "  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\n",
    "  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\n",
    "  File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked\n",
    "  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\n",
    "  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\n",
    "  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n",
    "  File \"/home/mrudolph/documents/hetcommarl/epymarl/multiagent-particle-envs/mpe/__init__.py\", line 20, in <module>\n    scenario = scenarios.load(scenario_name + \".py\").Scenario()\n",
    "  File \"/home/mrudolph/documents/hetcommarl/epymarl/multiagent-particle-envs/mpe/scenarios/__init__.py\", line 7, in load\n    return imp.load_source('', pathname)\n",
    "  File \"/home/mrudolph/miniconda3/envs/commgpi/lib/python3.7/imp.py\", line 171, in load_source\n    module = _load(spec)\n",
    "  File \"<frozen importlib._bootstrap>\", line 696, in _load\n",
    "  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\n",
    "  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\n",
    "  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n",
    "  File \"/home/mrudolph/documents/hetcommarl/epymarl/multiagent-particle-envs/mpe/scenarios/multi_speaker_listener.py\", line 2, in <module>\n    import seaborn as sns\n",
    "ModuleNotFoundError: No module named 'seaborn'\n",
    "\nDuring handling of the above exception, another exception occurred:\n\n",
    "Traceback (most recent call last):\n",
    "  File \"/home/mrudolph/miniconda3/envs/commgpi/lib/python3.7/site-packages/sacred/config/captured_function.py\", line 42, in captured_function\n    result = wrapped(*args, **kwargs)\n",
    "  File \"src/main.py\", line 36, in my_main\n    run(_run, config, _log)\n",
    "  File \"/home/mrudolph/documents/hetcommarl/epymarl/src/run.py\", line 55, in run\n    run_sequential(args=args, logger=logger)\n",
    "  File \"/home/mrudolph/documents/hetcommarl/epymarl/src/run.py\", line 87, in run_sequential\n    runner = r_REGISTRY[args.runner](args=args, logger=logger)\n",
    "  File \"/home/mrudolph/documents/hetcommarl/epymarl/src/runners/episode_runner.py\", line 15, in __init__\n    self.env = env_REGISTRY[self.args.env](**self.args.env_args)\n",
    "  File \"/home/mrudolph/documents/hetcommarl/epymarl/src/envs/__init__.py\", line 14, in env_fn\n    return env(**kwargs)\n",
    "  File \"/home/mrudolph/documents/hetcommarl/epymarl/src/envs/__init__.py\", line 82, in __init__\n    self.original_env = gym.make(f\"{key}\", **kwargs)\n",
    "  File \"/home/mrudolph/miniconda3/envs/commgpi/lib/python3.7/site-packages/gym/envs/registration.py\", line 235, in make\n    return registry.make(id, **kwargs)\n",
    "  File \"/home/mrudolph/miniconda3/envs/commgpi/lib/python3.7/site-packages/gym/envs/registration.py\", line 128, in make\n    spec = self.spec(path)\n",
    "  File \"/home/mrudolph/miniconda3/envs/commgpi/lib/python3.7/site-packages/gym/envs/registration.py\", line 143, in spec\n    mod_name\n",
    "gym.error.Error: A module (mpe) was specified for the environment but was not found, make sure the package is installed with `pip install` before calling `gym.make()`\n"
  ],
  "heartbeat": "2023-07-04T19:19:21.390381",
  "host": {
    "ENV": {},
    "cpu": "AMD EPYC 7452 32-Core Processor",
    "gpus": {
      "driver_version": "470.141.03",
      "gpus": [
        {
          "model": "Quadro RTX 6000",
          "persistence_mode": false,
          "total_memory": 24220
        },
        {
          "model": "Quadro RTX 6000",
          "persistence_mode": false,
          "total_memory": 24220
        },
        {
          "model": "Quadro RTX 6000",
          "persistence_mode": false,
          "total_memory": 24220
        },
        {
          "model": "Quadro RTX 6000",
          "persistence_mode": false,
          "total_memory": 24220
        }
      ]
    },
    "hostname": "hopper",
    "os": [
      "Linux",
      "Linux-4.15.0-196-generic-x86_64-with-debian-buster-sid"
    ],
    "python_version": "3.7.16"
  },
  "meta": {
    "command": "my_main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false,
      "COMMAND": null,
      "UPDATE": [
        "env_args.time_limit=25",
        "env_args.key=mpe:SimpleSpread-v0"
      ],
      "help": false,
      "with": true
    }
  },
  "resources": [],
  "result": null,
  "start_time": "2023-07-04T19:19:21.376496",
  "status": "FAILED",
  "stop_time": "2023-07-04T19:19:21.392821"
}